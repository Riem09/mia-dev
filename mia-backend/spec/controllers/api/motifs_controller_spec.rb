require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Api::MotifsController do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MotifsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  def valid_attributes
    {
        "name" => "MotifName",
        "description" => 'MotifDescription',
        "owner_id" => @user.id,
        "image" => fixture_file_upload('sample_mpeg4.mp4'),
        "video_upload_attributes" => {
            "source_video" => create(:video_upload).source_video
        }
    }
  end

  before(:each) do
    @user = create(:user)
    sign_in @user
  end

  describe 'GET search' do

    before(:each) do
      @m1 = create(:motif, :name => 'motif1')
      @m2 = create(:motif, :parent => @m1, :name => 'asdf')
      @m3 = create(:motif, :name => 'motty')
      @m4 = create(:motif, :name => 'motif')
    end

    it 'Should return exact matches and their children' do
      get :search, {
          :name => 'motif1'
      }
      expect( assigns(:matches) ).to eq([@m1, @m2])
    end

    it 'Should return partial matches' do
      get :search, {
          :name => 'mot'
      }
      expect( assigns(:matches).length ).to eq(3)
    end

    it 'Should return matches in order' do
      get :search, {
          :name => 'motif'
      }
      expect( assigns(:matches) ).to eq([@m4,@m1])
    end

  end

  describe "GET index" do
    it "assigns all motifs as @motifs" do
      motif = Motif.create! valid_attributes
      get :index, {}, valid_session
      assigns(:motifs).should eq([motif])
    end
  end

  describe "GET show" do
    it "assigns the requested motif as @motif" do
      motif = Motif.create! valid_attributes
      get :show, {:id => motif.to_param}, valid_session
      assigns(:motif).should eq(motif)
    end
  end

  describe "GET new" do
    it "assigns a new motif as @motif" do
      get :new, {}, valid_session
      assigns(:motif).should be_a_new(Motif)
    end
  end

  describe "GET edit" do
    it "assigns the requested motif as @motif" do
      motif = Motif.create! valid_attributes
      get :edit, {:id => motif.to_param}, valid_session
      assigns(:motif).should eq(motif)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Motif" do
        expect {
          begin
            post :create, {:motif => valid_attributes}#, valid_session
          rescue Exception => e
            puts e
          end
        }.to change(Motif, :count).by(1)
      end

      it "assigns a newly created motif as @motif" do
        post :create, {:motif => valid_attributes}, valid_session
        assigns(:motif).should be_a(Motif)
        assigns(:motif).should be_persisted
      end

    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved motif as @motif" do
        # Trigger the behavior that occurs when invalid params are submitted
        Motif.any_instance.stub(:save).and_return(false)
        post :create, {:motif => { "name" => "invalid value" }}, valid_session
        assigns(:motif).should be_a_new(Motif)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested motif" do
        motif = Motif.create! valid_attributes
        # Assuming there are no other motifs in the database, this
        # specifies that the Motif created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Motif.any_instance.should_receive(:update).with({ "name" => "MyString" })
        put :update, {:id => motif.to_param, :motif => { "name" => "MyString" }}, valid_session
      end

      it "assigns the requested motif as @motif" do
        motif = Motif.create! valid_attributes
        put :update, {:id => motif.to_param, :motif => valid_attributes}, valid_session
        assigns(:motif).should eq(motif)
      end

    end

    describe "with invalid params" do
      it "assigns the motif as @motif" do
        motif = Motif.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Motif.any_instance.stub(:save).and_return(false)
        put :update, {:id => motif.to_param, :motif => { "name" => "invalid value" }}, valid_session
        assigns(:motif).should eq(motif)
      end

    end
  end

  describe "DELETE destroy" do
    it "destroys the requested motif" do
      motif = Motif.create! valid_attributes
      expect {
        delete :destroy, {:id => motif.to_param}, valid_session
      }.to change(Motif, :count).by(-1)
    end

  end

end
