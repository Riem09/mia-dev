require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Api::VideoMotifsController do

  before(:each) do
    @user = create(:user)
    sign_in @user
    @motif = create(:motif)
    @video = create(:video)
  end

  def valid_attributes
    {
        :video => @video,
        :motif => @motif,
        :start_time_ms => 100,
        :owner => @user
    }
  end

  let(:valid_parameters) {
    {
        :video_id => @video.id,
        :motif_id => @motif.id,
        :start_time_ms => 100
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VideoMotifsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all video_motifs as @video_motifs" do
      video_motif = VideoMotif.create! valid_attributes
      get :index, {}, valid_session
      assigns(:video_motifs).should eq([video_motif])
    end
  end

  describe "GET show" do
    it "assigns the requested video_motif as @video_motif" do
      video_motif = VideoMotif.create! valid_attributes
      get :show, {:id => video_motif.to_param}, valid_session
      assigns(:video_motif).should eq(video_motif)
    end
  end

  describe "GET new" do
    it "assigns a new video_motif as @video_motif" do
      get :new, {}, valid_session
      assigns(:video_motif).should be_a_new(VideoMotif)
    end
  end

  describe "GET edit" do
    it "assigns the requested video_motif as @video_motif" do
      video_motif = VideoMotif.create! valid_attributes
      get :edit, {:id => video_motif.to_param}, valid_session
      assigns(:video_motif).should eq(video_motif)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new VideoMotif" do
        expect {
          post :create, {:video_motif => valid_parameters}, valid_session
        }.to change(VideoMotif, :count).by(1)
      end

      it "assigns a newly created video_motif as @video_motif" do
        post :create, {:video_motif => valid_parameters}, valid_session
        assigns(:video_motif).should be_a(VideoMotif)
        assigns(:video_motif).should be_persisted
      end

    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved video_motif as @video_motif" do
        # Trigger the behavior that occurs when invalid params are submitted
        VideoMotif.any_instance.stub(:save).and_return(false)
        post :create, {:video_motif => { "video_id" => "" }}, valid_session
        assigns(:video_motif).should be_a_new(VideoMotif)
      end

    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested video_motif" do
        video_motif = VideoMotif.create! valid_attributes
        # Assuming there are no other video_motifs in the database, this
        # specifies that the VideoMotif created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        vid = create(:video)
        VideoMotif.any_instance.should_receive(:update).with({ :owner => @user, 'video_id' => "#{vid.id}" })
        put :update, {:id => video_motif.to_param, :video_motif => { 'video_id' => vid }}, valid_session
      end

      it "assigns the requested video_motif as @video_motif" do
        video_motif = VideoMotif.create! valid_attributes
        put :update, {:id => video_motif.to_param, :video_motif => valid_parameters}, valid_session
        assigns(:video_motif).should eq(video_motif)
      end

    end

    describe "with invalid params" do
      it "assigns the video_motif as @video_motif" do
        video_motif = VideoMotif.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        VideoMotif.any_instance.stub(:save).and_return(false)
        put :update, {:id => video_motif.to_param, :video_motif => { "video_id" => '' }}, valid_session
        assigns(:video_motif).should eq(video_motif)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested video_motif" do
      video_motif = VideoMotif.create! valid_attributes
      expect {
        delete :destroy, {:id => video_motif.to_param}, valid_session
      }.to change(VideoMotif, :count).by(-1)
    end

  end

end
